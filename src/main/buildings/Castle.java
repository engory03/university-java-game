package main.buildings;

import main.units.Unit;

import java.util.*;

public class Castle {
    private final String owner; // –í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–º–∫–∞ (–ò–≥—Ä–æ–∫ –∏–ª–∏ –ö–æ–º–ø—å—é—Ç–µ—Ä)
    private final int x, y; // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–º–∫–∞
    private int gold; // –ó–æ–ª–æ—Ç–æ –≤ –∑–∞–º–∫–µ
    private int points; // –û—á–∫–∏ –∏–≥—Ä–æ–∫–∞
    private int steps; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π —Ö–æ–¥
    private final List<Unit> units; // –ê—Ä–º–∏—è –≤ –∑–∞–º–∫–µ
    private final List<String> buildings; // –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—Ä–æ–µ–∫
    private boolean captureTimeReduction; // –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ –∑–∞–º–∫–∞

    // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–¥–∞–Ω–∏–π
    private static final Map<String, Integer> BUILDING_COSTS = new HashMap<>();

    // –°–≤—è–∑—å –º–µ–∂–¥—É –∑–¥–∞–Ω–∏—è–º–∏ –∏ —é–Ω–∏—Ç–∞–º–∏
    private static final Map<String, String> BUILDING_TO_UNIT = new HashMap<>();

    static {
        BUILDING_COSTS.put("–¢–∞–≤–µ—Ä–Ω–∞", 5);
        BUILDING_COSTS.put("–ö–æ–Ω—é—à–Ω—è", 10);
        BUILDING_COSTS.put("–°—Ç–æ—Ä–æ–∂–µ–≤–æ–π –ø–æ—Å—Ç", 15);
        BUILDING_COSTS.put("–ë–∞—à–Ω—è –∞—Ä–±–∞–ª–µ—Ç—á–∏–∫–æ–≤", 20);
        BUILDING_COSTS.put("–û—Ä—É–∂–µ–∏ÃÜ–Ω–∞—è", 25);
        BUILDING_COSTS.put("–ê—Ä–µ–Ω–∞", 30);
        BUILDING_COSTS.put("–°–æ–±–æ—Ä", 35);

        // –°–≤—è–∑—å –∑–¥–∞–Ω–∏–π –∏ —é–Ω–∏—Ç–æ–≤
        BUILDING_TO_UNIT.put("–¢–∞–≤–µ—Ä–Ω–∞", "–ì–µ—Ä–æ–π");
        BUILDING_TO_UNIT.put("–°—Ç–æ—Ä–æ–∂–µ–≤–æ–π –ø–æ—Å—Ç", "–ö–æ–ø–µ–π—â–∏–∫");
        BUILDING_TO_UNIT.put("–ë–∞—à–Ω—è –∞—Ä–±–∞–ª–µ—Ç—á–∏–∫–æ–≤", "–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫");
        BUILDING_TO_UNIT.put("–û—Ä—É–∂–µ–π–Ω–∞—è", "–ú–µ—á–Ω–∏–∫");
        BUILDING_TO_UNIT.put("–ê—Ä–µ–Ω–∞", "–ö–∞–≤–∞–ª–µ—Ä–∏—Å—Ç");
        BUILDING_TO_UNIT.put("–°–æ–±–æ—Ä", "–ü–∞–ª–∞–¥–∏–Ω");
    }

    public Castle(String owner, int x, int y) {
        this.owner = owner;
        this.x = x;
        this.y = y;
        this.gold = 100; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–æ–ª–æ—Ç–æ
        this.steps = 10; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        this.points = 0;
        this.units = new ArrayList<>();
        this.buildings = new ArrayList<>();
        this.buildings.add("–°—Ç–æ—Ä–æ–∂–µ–≤–æ–π –ø–æ—Å—Ç"); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞
    }

    public void setGold(int gold) {
        this.gold = gold;
    }

    public void setPoints(int points) {
        this.points = points;
    }

    public void setSteps(int steps) {
        this.steps = steps;
    }

    public String getOwner() {
        return owner;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public int getGold() {
        return gold;
    }

    public List<Unit> getUnits() {
        return units;
    }

    public List<String> getBuildings() {
        return buildings;
    }

    public int getSteps() {
        return steps;
    }

    public int getPoints() {
        return points;
    }

    public void spendSteps(int steps) {
        this.steps -= steps;
    }

    public void resetSteps() {
        this.steps = 10;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
    public void addGold(int amount) {
        gold += amount;
    }

    // –¢—Ä–∞—Ç–∞ –∑–æ–ª–æ—Ç–∞
    public void spendGold(int amount) {
        if (gold >= amount) {
            gold -= amount;
        } else {
            System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!");
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —é–Ω–∏—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    public void removeUnit(Unit unit) {
        units.remove(unit);
    }

    // –ü–æ–∫—É–ø–∫–∞ —é–Ω–∏—Ç–∞
    public boolean buyUnit(Unit unit) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è –Ω–∞–π–º–∞ —é–Ω–∏—Ç–∞
        if (!checkBuilding(unit.getType())) {
            String requiredBuilding = getBuildingForUnit(unit.getType());
            System.out.println("–î–ª—è –Ω–∞–π–º–∞ " + unit.getType() + " –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å " + requiredBuilding);
            return false;
        }

        if (gold >= unit.getCost()) {
            units.add(unit);
            gold -= unit.getCost();
            System.out.println(owner + " –Ω–∞–Ω—è–ª " + unit.getType());
            return true;
        } else {
            System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!");
            return false;
        }
    }

    // –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –∑–¥–∞–Ω–∏—è
    public boolean build(String building) {
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        String normalizedBuilding = building.trim().toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
        for (Map.Entry<String, Integer> entry : BUILDING_COSTS.entrySet()) {
            if (entry.getKey().toLowerCase().equals(normalizedBuilding)) {
                if (buildings.contains(entry.getKey())) {
                    System.out.println(entry.getKey() + " —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!");
                    return false;
                }

                int cost = entry.getValue();
                if (gold >= cost) {
                    buildings.add(entry.getKey());
                    gold -= cost;
                    int pointsEarned = cost / 5; // 1 –æ—á–∫–æ –∑–∞ 5 –∑–æ–ª–æ—Ç—ã—Ö
                    addPoints(pointsEarned);
                    System.out.println(owner + " –ø–æ—Å—Ç—Ä–æ–∏–ª " + entry.getKey() + " –∑–∞ " + cost + " –∑–æ–ª–æ—Ç–∞.");
                    System.out.println("+ " + pointsEarned + " –æ—á–∫–æ–≤ –∑–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É!");
                    return true;
                } else {
                    System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ " + entry.getKey() + "!");
                    return false;
                }
            }
        }

        System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ: " + building);
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–π–º–∞ —é–Ω–∏—Ç–∞
    public boolean checkBuilding(String unitType) {
        // –ù–∞—Ö–æ–¥–∏–º –∑–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞–π–º —é–Ω–∏—Ç–∞
        for (Map.Entry<String, String> entry : BUILDING_TO_UNIT.entrySet()) {
            if (entry.getValue().equals(unitType)) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ —É –∏–≥—Ä–æ–∫–∞
                return buildings.contains(entry.getKey());
            }
        }
        return false; // –ï—Å–ª–∏ –∑–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É —é–Ω–∏—Ç–∞
    public String getBuildingForUnit(String unitType) {
        for (Map.Entry<String, String> entry : BUILDING_TO_UNIT.entrySet()) {
            if (entry.getValue().equals(unitType)) {
                return entry.getKey();
            }
        }
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ";
    }

    // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–∫–µ
    public void printCastleInfo() {
        System.out.println();
        System.out.println("üîπ –ó–∞–º–æ–∫ " + owner + " | –ó–æ–ª–æ—Ç–æ: " + gold + " | –û—á–∫–∏: " + points);
        System.out.println("üìú –ü–æ—Å—Ç—Ä–æ–π–∫–∏: " + buildings);
        System.out.println("üõ° –Æ–Ω–∏—Ç—ã: " + (units.isEmpty() ? "–ü—É—Å—Ç–æ" : ""));
        for (Unit unit : units) {
            System.out.println(" - " + unit.getType() + " (HP: " + unit.getHp() + ", –ê—Ç–∞–∫–∞: " + unit.getAttack() + ")");
        }
        System.out.println();
    }

    public void addPoints(int amount) {
        points += amount;
    }

    public boolean isCaptureTimeReduced() {
        return captureTimeReduction;
    }

    public void setCaptureTimeReduction(boolean value) {
        captureTimeReduction = value;
    }

    public int getCaptureTime() {
        return isCaptureTimeReduced() ? 1 : 2;
    }
}
